---
- name: Smoke test the environment
  fail:
    msg: "The pantheon_deploy variable is undefined or missing required parameters."
  when: "\
        (pantheon_deploy.source.git_dir is not defined) or \
        (pantheon_deploy.target.ssh_key_base64 is not defined) or \
        (pantheon_deploy.target.ssh_pub_base64 is not defined) or \
        (pantheon_deploy.target.repo_url is not defined) \
        "

- name: Create a temp directory to store files needed by the run
  tempfile:
    state: directory
    prefix: "pantheon-deploy-"
  register: _run_temp_dir

- name: Copy the key to the temp dir
  copy:
    content: "{{ item.data | b64decode }}"
    dest: "{{ item.dest }}"
    mode: "0600"
  loop:
    - data: "{{ pantheon_deploy.target.ssh_key_base64 }}"
      dest: "{{ _run_temp_dir.path }}/id_ssh"
    - data: "{{ pantheon_deploy.target.ssh_pub_base64 }}"
      dest: "{{ _run_temp_dir.path }}/id_ssh.pub"
  no_log: "{{ pantheon_deploy.debug | default(true) | bool }}"

# Some CI systems will clone with a different user. This can throw an error
# when trying to get the branch, so we explicitly tell git to allow it.
- name: Get the source repo's current branch
  shell: >
    git config --global --add safe.directory {{ pantheon_deploy.source.git_dir }} ;
    git rev-parse --abbrev-ref HEAD
  args:
    chdir: "{{ pantheon_deploy.source.git_dir }}"
  register: _git_branch_detected
  when:
    - pantheon_deploy.source.git_branch | default('') == ''

- name: Resolve the source git branch name
  set_fact:
    _git_branch: "{{ pantheon_deploy.source.git_branch | default(_git_branch_detected.stdout) }}"

- name: Fail if we could not resolve the source branch name.
  fail:
    msg: "Could not detect git branch, and git_branch was not configured"
  when:
    _git_branch == ''

- name: Resolve the target git branch name
  set_fact:
    _target_branch: "{% if (_git_branch == 'main') or (_git_branch == 'develop') or (_git_branch == '') %}\
                         master\
                         {% else %}\
                         {{ _git_branch }}\
                         {% endif %}"

- name: Check if the target branch exists
  shell: >
    git ls-remote --exit-code --heads {{ pantheon_deploy.target.repo_url }} {{ _target_branch }}
  ignore_errors: yes
  environment:
    GIT_SSH_COMMAND: "ssh -i {{ _run_temp_dir.path }}/id_ssh -o StrictHostKeyChecking=accept-new -o PubkeyAcceptedAlgorithms=+ssh-rsa -o HostkeyAlgorithms=+ssh-rsa"
  register: _target_branch_exists

- name: Clone branch from upstream
  ansible.builtin.git:
    repo: "{{ pantheon_deploy.target.repo_url }}"
    dest: "{{ _run_temp_dir.path }}/src"
    clone: yes
    force: yes
    recursive: yes
    bare: no
    update: yes
    accept_hostkey: yes
    ssh_opts: "-o IdentityFile={{ _run_temp_dir.path }}/id_ssh -o PubkeyAcceptedAlgorithms=+ssh-rsa -o HostkeyAlgorithms=+ssh-rsa"
    key_file: "{{ _run_temp_dir.path }}/id_ssh"
    version: "{% if _target_branch_exists.rc == 0 %}\
              {{ _target_branch }}\
              {% else %}\
              master\
              {% endif %}"
  environment:
    GIT_TERMINAL_PROMPT: 0

- name: Create upstream branch unless on main or develop
  shell: >
    git switch -C {{ _git_branch }}
  args:
    chdir: "{{ _run_temp_dir.path }}/src/"
  when:
    - _target_branch_exists.rc != 0
  environment:
    GIT_SSH_COMMAND: "ssh -i {{ _run_temp_dir.path }}/id_ssh -o PubkeyAcceptedAlgorithms=+ssh-rsa -o HostkeyAlgorithms=+ssh-rsa"

- name: Copy changes to upstream
  ansible.posix.synchronize:
    src: "{{ pantheon_deploy.source.git_dir }}/"
    dest: "{{ _run_temp_dir.path }}/src/"
    delete: yes
    archive: yes
    rsync_opts: "--exclude=.git/"
  delegate_to: localhost

- name: Check if .gitignore-pantheon exists
  stat:
    name: "{{ pantheon_deploy.source.git_dir }}/.gitignore-pantheon"
  register: _gitignore_pantheon

- name: Overwrite .gitignore on target if .gitignore-pantheon exists
  copy:
    src: "{{ pantheon_deploy.source.git_dir }}/.gitignore-pantheon"
    dest: "{{ _run_temp_dir.path }}/src/.gitignore"
  when:
    - _gitignore_pantheon.stat.exists == true

- name: Generate the npm directory path
  set_fact:
    _npm_dir: "\
      {{ _run_temp_dir.path }}/src\
      {% if pantheon_deploy.build.npm_dir is defined %}\
      /{{ pantheon_deploy.build.npm_dir }}\
      {% endif %}"

- name: Check if package.json exists
  stat:
    name: "{{ _npm_dir }}/package.json"
  register: _package_json

- name: Install NPM
  shell: "npm ci"
  args:
    chdir: "{{ _npm_dir }}"
  when:
    - _package_json.stat.exists == true

- name: Run npm build
  shell: "npm run {{ pantheon_deploy.build.npm_build_script_name | default('build') }}"
  args:
    chdir: "{{ _npm_dir }}"
  when:
    - _package_json.stat.exists == true

- name: Check if there are git changes
  shell: >
    git status --porcelain
  args:
    chdir: "{{ _run_temp_dir.path }}/src/"
  register: _git_status

- name: Add, commit, and push upstream if changes
  shell: >
    git add -A &&
    git commit -m "{{ _message }}" &&
    git push -u origin {{ _target_branch }}
  args:
    chdir: "{{ _run_temp_dir.path }}/src/"
  vars:
    _message: >
      Automated merge from {{ lookup('env', 'DRONE_COMMIT_SHA') }}
  environment:
    GIT_SSH_COMMAND: "ssh -i {{ _run_temp_dir.path }}/id_ssh -o PubkeyAcceptedAlgorithms=+ssh-rsa -o HostkeyAlgorithms=+ssh-rsa"
  when:
    - _git_status.stdout | default('') != ''

- name: Get most recent tag if on main
  shell: >
    git tag -l | grep pantheon_test_ | sort -V | tail -n 1
  args:
    chdir: "{{ _run_temp_dir.path }}/src/"
  register: _last_tag
  when:
    - _git_branch == 'main'

- name: Tag the release if on main
  shell: >
    git tag {{ _next_tag }} && git push --tags
  args:
    chdir: "{{ _run_temp_dir.path }}/src/"
  vars:
    _next_tag: "{% if _last_tag.stdout | default('') != '' %}\
                pantheon_test_{{ _last_tag.stdout.split('_') | last | int + 1}}\
                {% else %}\
                pantheon_test_1\
                {% endif %}"
  when:
    - _git_branch == 'main'
  environment:
    GIT_SSH_COMMAND: "ssh -i {{ _run_temp_dir.path }}/id_ssh -o PubkeyAcceptedAlgorithms=+ssh-rsa -o HostkeyAlgorithms=+ssh-rsa"
